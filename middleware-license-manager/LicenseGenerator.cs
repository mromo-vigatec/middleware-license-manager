using System;
using System.IO;
using System.Text;
using System.Security.Cryptography.X509Certificates;
using System.Security.Cryptography;

namespace middleware_license_manager
{
    public static class LicenseGenerator
    {
        /// <summary>
        /// Genera un archivo de licencia (.lic) con la información proporcionada
        /// </summary>
        /// <param name="numeroSerial">Número serial del equipo</param>
        /// <param name="numeroUUID">UUID del sistema</param>
        /// <param name="serialDisco">Serial del disco</param>
        /// <param name="fechaExpiracion">Fecha de expiración</param>
        /// <param name="rutaArchivo">Ruta donde guardar el archivo de licencia</param>
        /// <param name="certificado">Certificado para firmar la licencia</param>
        public static void GenerarArchivoLicencia(
            string numeroSerial,
            string numeroUUID,
            string serialDisco,
            DateTime fechaExpiracion,
            string rutaArchivo,
            X509Certificate2 certificado = null)
        {
            try
            {
                var licenseContent = new StringBuilder();
                
                // Encabezado del archivo de licencia
                licenseContent.AppendLine("[LICENSE_HEADER]");
                licenseContent.AppendLine($"LicenseVersion=1.0");
                licenseContent.AppendLine($"GeneratedDate={DateTime.Now:yyyy-MM-dd HH:mm:ss}");
                licenseContent.AppendLine($"GeneratedBy=Middleware License Manager");
                licenseContent.AppendLine();

                // Información de la licencia
                licenseContent.AppendLine("[LICENSE_INFO]");
                licenseContent.AppendLine($"SerialNumber={numeroSerial}");
                licenseContent.AppendLine($"SystemUUID={numeroUUID}");
                licenseContent.AppendLine($"DiskSerial={serialDisco}");
                licenseContent.AppendLine($"ExpirationDate={fechaExpiracion:yyyy-MM-dd}");
                licenseContent.AppendLine($"IssuedDate={DateTime.Now:yyyy-MM-dd}");
                licenseContent.AppendLine();

                // Información del certificado (si está disponible)
                if (certificado != null)
                {
                    licenseContent.AppendLine("[CERTIFICATE_INFO]");
                    licenseContent.AppendLine($"Subject={certificado.Subject}");
                    licenseContent.AppendLine($"Thumbprint={certificado.Thumbprint}");
                    licenseContent.AppendLine($"ValidFrom={certificado.NotBefore:yyyy-MM-dd}");
                    licenseContent.AppendLine($"ValidTo={certificado.NotAfter:yyyy-MM-dd}");
                    licenseContent.AppendLine();
                }

                // Generar hash de verificación de los datos principales
                string dataToHash = $"{numeroSerial}|{numeroUUID}|{serialDisco}|{fechaExpiracion:yyyy-MM-dd}";
                string dataHash = GenerarHashSHA256(dataToHash);

                licenseContent.AppendLine("[VERIFICATION]");
                licenseContent.AppendLine($"DataHash={dataHash}");
                
                // Si hay certificado, firmar el hash
                if (certificado != null && certificado.HasPrivateKey)
                {
                    string signature = FirmarDatos(dataToHash, certificado);
                    licenseContent.AppendLine($"DigitalSignature={signature}");
                }
                
                licenseContent.AppendLine();

                // Pie del archivo
                licenseContent.AppendLine("[LICENSE_FOOTER]");
                licenseContent.AppendLine("# This license file was generated by Middleware License Manager");
                licenseContent.AppendLine("# Do not modify this file as it may invalidate the license");
                licenseContent.AppendLine($"# File checksum: {GenerarHashSHA256(licenseContent.ToString())}");

                // Escribir el archivo
                File.WriteAllText(rutaArchivo, licenseContent.ToString(), Encoding.UTF8);
            }
            catch (Exception ex)
            {
                throw new Exception($"Error al generar el archivo de licencia: {ex.Message}", ex);
            }
        }

        /// <summary>
        /// Genera un hash SHA256 de una cadena de texto
        /// </summary>
        private static string GenerarHashSHA256(string input)
        {
            using (SHA256 sha256Hash = SHA256.Create())
            {
                byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(input));
                
                StringBuilder builder = new StringBuilder();
                for (int i = 0; i < bytes.Length; i++)
                {
                    builder.Append(bytes[i].ToString("x2"));
                }
                return builder.ToString();
            }
        }

        /// <summary>
        /// Firma digitalmente los datos usando el certificado
        /// </summary>
        private static string FirmarDatos(string data, X509Certificate2 certificado)
        {
            try
            {
                if (!certificado.HasPrivateKey)
                    return "NO_PRIVATE_KEY";

                using (RSA rsa = certificado.GetRSAPrivateKey())
                {
                    if (rsa == null)
                        return "NO_RSA_KEY";

                    byte[] dataBytes = Encoding.UTF8.GetBytes(data);
                    byte[] signature = rsa.SignData(dataBytes, HashAlgorithmName.SHA256, RSASignaturePadding.Pkcs1);
                    return Convert.ToBase64String(signature);
                }
            }
            catch (Exception)
            {
                return "SIGNATURE_ERROR";
            }
        }

        /// <summary>
        /// Valida la estructura básica de un archivo de licencia
        /// </summary>
        /// <param name="rutaArchivo">Ruta del archivo de licencia</param>
        /// <returns>True si la estructura es válida</returns>
        public static bool ValidarEstructuraLicencia(string rutaArchivo)
        {
            try
            {
                if (!File.Exists(rutaArchivo))
                    return false;

                string content = File.ReadAllText(rutaArchivo);
                
                // Verificar secciones requeridas
                return content.Contains("[LICENSE_HEADER]") &&
                       content.Contains("[LICENSE_INFO]") &&
                       content.Contains("[VERIFICATION]") &&
                       content.Contains("[LICENSE_FOOTER]");
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// Genera un nombre de archivo sugerido para la licencia
        /// </summary>
        /// <param name="numeroSerial">Número serial para incluir en el nombre</param>
        /// <returns>Nombre de archivo sugerido</returns>
        public static string GenerarNombreArchivoLicencia(string numeroSerial)
        {
            // Limpiar caracteres no válidos del serial
            string serialLimpio = numeroSerial;
            foreach (char c in Path.GetInvalidFileNameChars())
            {
                serialLimpio = serialLimpio.Replace(c, '_');
            }

            return $"License_{serialLimpio}_{DateTime.Now:yyyyMMdd}.lic";
        }
    }
}